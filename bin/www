#!/usr/bin/env node

const app = require('../app')
// const debug = require('debug')('server:server')
const http = require('http')
const https = require('https')
const fs = require('fs')

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '8888')
app.set('port', port)

let server = null

try {
    let options = {
        key: fs.readFileSync("/home/ubuntu/sync/reversi/key.pem"),
        cert: fs.readFileSync("/home/ubuntu/sync/reversi/cert.pem")
    }
    server = https.createServer(options, app)
    console.log("Starting HTTPS")
} catch(err) {
    server = http.createServer(app)
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10)

    if (isNaN(port)) {
        // named pipe
        return val
    }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

  let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address()
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    // debug('Listening on ' + bind)
    console.log('Listening on ' + bind)
}
